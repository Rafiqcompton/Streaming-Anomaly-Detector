import numpy as np

class AnomalyDetector:
    def __init__(self, window_size=100, threshold=0.99):
        self.window = np.array([])
        self.window_size = window_size
        self.threshold = threshold

    def update(self, new_data_point):
        self.window = np.roll(self.window, 1)
        self.window[0] = new_data_point

    def detect_anomalies(self):
        mean = np.mean(self.window)
        std = np.std(self.window)

        anomalies = []
        for data_point in self.window:
            if abs(data_point - mean) > self.threshold * std:
                anomalies.append(data_point)

        return anomalies

# Example usage:

detector = AnomalyDetector()

# Update the detector with new data points
for data_point in streaming_data:
    detector.update(data_point)

# Detect anomalies
anomalies = detector.detect_anomalies()

# Print the anomalies
for anomaly in anomalies:
    print(anomaly)
